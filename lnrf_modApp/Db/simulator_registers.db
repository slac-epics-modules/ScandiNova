record (mbbi,"$(P):State") {
	field(DESC, "Current state of modulator")
	field(UNSV, "MAJOR")
	field(ZRSV, "MAJOR")
	info(archive,"policy:Default")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read3 0)")
	field(DTYP, "asynInt32")
	field(ZRVL, "-1")
	field(ZRST, "Error")
	field(ONVL, "0")
	field(ONST, "Initialize")
	field(TWVL, "1")
	field(TWST, "Off")
	field(THVL, "2")
	field(THST, "StandByInterlock")
	field(FRVL, "3")
	field(FRST, "StandByOffRequested")
	field(FVVL, "4")
	field(FVST, "StandByOnRequested")
	field(SXVL, "5")
	field(SXST, "StandBy")
	field(SVVL, "6")
	field(SVST, "HvInterlock")
	field(EIVL, "7")
	field(EIST, "HvOffRequested")
	field(NIVL, "8")
	field(NIST, "HvOnRequested")
	field(TEVL, "9")
	field(TEST, "Hv")
	field(ELVL, "10")
	field(ELST, "TrigInterlock")
	field(TVVL, "11")
	field(TVST, "TrigOffRequested")
	field(TTVL, "12")
	field(TTST, "TrigOnRequested")
	field(FTVL, "13")
	field(FTST, "Trig")
	field(FFVL, "99")
	field(FFST, "Disabled")
}
record (bi,"$(P):StandByStateIntlk") {
	field(DESC, "Interlock exists in the StandBy state")
	field(ZNAM, "OK")
	field(ONAM, "FAULT")
	field(ZSV, "NO_ALARM")
	field(OSV, "MAJOR")
	field(SCAN, "I/O Intr")
	field(INP, "@asynMask(read4 0 0x01 500)")
	field(DTYP, "asynUInt32Digital")
}
record (bi,"$(P):HVStateIntlk") {
	field(DESC, "Interlock exists in the HV state")
	field(ZNAM, "OK")
	field(ONAM, "FAULT")
	field(ZSV, "NO_ALARM")
	field(OSV, "MAJOR")
	field(SCAN, "I/O Intr")
	field(INP, "@asynMask(read4 0 0x02 500)")
	field(DTYP, "asynUInt32Digital")
}
record (bi,"$(P):TrigStateIntlk") {
	field(DESC, "Interlock exists in the trigger state")
	field(ZNAM, "OK")
	field(ONAM, "FAULT")
	field(ZSV, "NO_ALARM")
	field(OSV, "MAJOR")
	field(SCAN, "I/O Intr")
	field(INP, "@asynMask(read4 0 0x04 500)")
	field(DTYP, "asynUInt32Digital")
}
record (bi,"$(P):WarningExists") {
	field(DESC, "Warning bit is high on a modulator state")
	field(ZNAM, "OK")
	field(ONAM, "WARNING")
	field(ZSV, "NO_ALARM")
	field(OSV, "MINOR")
	field(SCAN, "I/O Intr")
	field(INP, "@asynMask(read4 0 0x08 500)")
	field(DTYP, "asynUInt32Digital")
}
record (bi,"$(P):OutsideLimitsIntlk") {
	field(DESC, "Outside limits")
	field(ZNAM, "OK")
	field(ONAM, "FAULT")
	field(ZSV, "NO_ALARM")
	field(OSV, "MAJOR")
	field(SCAN, "I/O Intr")
	field(INP, "@asynMask(read4 0 0x10 500)")
	field(DTYP, "asynUInt32Digital")
}
record (bi,"$(P):ErrorExists") {
	field(DESC, "Error exists")
	field(ZNAM, "OK")
	field(ONAM, "FAULT")
	field(ZSV, "NO_ALARM")
	field(OSV, "MAJOR")
	field(SCAN, "I/O Intr")
	field(INP, "@asynMask(read4 0 0x20 500)")
	field(DTYP, "asynUInt32Digital")
}
record (mbbi,"$(P):AccessLevel") {
	field(DESC, "Access level of modulator. Remote/local")
	field(ZRSV, "NO_ALARM")
	field(ONSV, "MINOR")
	field(TWSV, "MINOR")
	field(THSV, "MAJOR")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read5 0)")
	field(DTYP, "asynInt32")
	field(ZRVL, "0")
	field(ZRST, "Remote")
	field(ONVL, "1")
	field(ONST, "Operator")
	field(TWVL, "2")
	field(TWST, "Admin")
	field(THVL, "3")
	field(THST, "ScandiNova")
}
record (ai,"$(P):FilamentWarmupTimeLeft") {
	field(DESC, "Remaining time on filament warm up timer")
	field(EGU, "s")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read6 0)")
	field(DTYP, "asynFloat64")
}
record (ai,"$(P):PulseRepetitionFreq") {
	field(DESC, "Pulse repetition frequency read value")
	field(EGU, "Hz")
	field(HIHI, "10.5")
	field(HHSV, "MAJOR")
	field(HIGH, "10.1")
	field(HSV, "MINOR")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read8 0)")
	field(DTYP, "asynFloat64")
}
record (mbbi,"$(P):StateSet:RBV") {
	field(DESC, "Readback of target modulator state")
	field(UNSV, "MAJOR")
	field(ZRSV, "MAJOR")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read20 0)")
	field(DTYP, "asynInt32")
	field(ZRVL, "-1")
	field(ZRST, "Error")
	field(ONVL, "0")
	field(ONST, "Initialize")
	field(TWVL, "1")
	field(TWST, "Off")
	field(THVL, "2")
	field(THST, "StandByInterlock")
	field(FRVL, "3")
	field(FRST, "StandByOffRequested")
	field(FVVL, "4")
	field(FVST, "StandByOnRequested")
	field(SXVL, "5")
	field(SXST, "StandBy")
	field(SVVL, "6")
	field(SVST, "HvInterlock")
	field(EIVL, "7")
	field(EIST, "HvOffRequested")
	field(NIVL, "8")
	field(NIST, "HvOnRequested")
	field(TEVL, "9")
	field(TEST, "Hv")
	field(ELVL, "10")
	field(ELST, "TrigInterlock")
	field(TVVL, "11")
	field(TVST, "TrigOffRequested")
	field(TTVL, "12")
	field(TTST, "TrigOnRequested")
	field(FTVL, "13")
	field(FTST, "Trig")
	field(FFVL, "99")
	field(FFST, "Disabled")
}
#record (ai,"$(P):VoltageSetRBV") {
#	field(DESC, "Readback of voltage setvalue of all ccps")
#	field(EGU, "V")
#	info(archive,"policy:Default")
#	field(SCAN, "I/O Intr")
#	field(INP, "@asyn(read21 0)")
#	field(DTYP, "asynFloat64")
#}
#record (ai,"$(P):FilamentCurrentSet:RBV") {
#	field(DESC, "Set val for filament current")
#	field(EGU, "A")
#	info(archive,"policy:Default")
#	field(SCAN, "I/O Intr")
#	field(INP, "@asyn(read23 0)")
#	field(DTYP, "asynFloat64")
#}
#record (ai,"$(P):PulseWidthSetRBV") {
#	field(DESC, "Readback of pulse width setvalue")
#	field(EGU, "us")
#	info(archive,"policy:Default")
#	field(SCAN, "I/O Intr")
#	field(INP, "@asyn(read25 0)")
#	field(DTYP, "asynFloat64")
#}
#record (ai,"$(P):PulseRepFreqSet:RBV") {
#	field(DESC, "Readback of pulse repetition freq setval")
#	field(EGU, "Hz")
#	info(archive,"policy:Default")
#	field(SCAN, "I/O Intr")
#	field(INP, "@asyn(read27 0)")
#	field(DTYP, "asynFloat64")
#}
#record (ai,"$(P):SolenoidPS1CurrentSet:RBV") {
#	field(DESC, "Current set for solenoid power supply 1")
#	field(EGU, "A")
#	info(archive,"policy:Default")
#	field(SCAN, "I/O Intr")
#	field(INP, "@asyn(read29 0)")
#	field(DTYP, "asynFloat64")
#}
#record (ai,"$(P):SolenoidPS2CurrentSet:RBV") {
#	field(DESC, "Current set for solenoid power supply 2")
#	field(EGU, "A")
#	info(archive,"policy:Default")
#	field(SCAN, "I/O Intr")
#	field(INP, "@asyn(read31 0)")
#	field(DTYP, "asynFloat64")
#}
#record (ai,"$(P):SolenoidPS3CurrentSet:RBV") {
#	field(DESC, "Current set for solenoid power supply 3")
#	field(EGU, "A")
#	info(archive,"policy:Default")
#	field(SCAN, "I/O Intr")
#	field(INP, "@asyn(read33 0)")
#	field(DTYP, "asynFloat64")
#}
record (ai,"$(P):Voltage") {
	field(DESC, "Capacitor charging power supply voltage")
	field(EGU, "V")
	field(HIHI, "1000")
	field(HHSV, "MAJOR")
	field(HIGH, "980")
	field(HSV, "MINOR")
	info(archive,"policy:3min")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read100 0) FLOAT32_LE")
	field(DTYP, "asynFloat64")
}
record (bi,"$(P):CCPSMainIntlk") {
	field(DESC, "Capacitor charging ps main intlk")
	field(ZNAM, "FAULT")
	field(ONAM, "OK")
	field(ZSV, "MAJOR")
	field(OSV, "NO_ALARM")
	info(archive,"policy:Default")
	field(SCAN, "I/O Intr")
	field(INP, "@asynMask(read120 0 0x01 500)")
	field(DTYP, "asynUInt32Digital")
}
record (bi,"$(P):CCPSPwnPulseCountIntlk") {
	field(DESC, "Capacitor charging ps pwn pulse intlk")
	field(ZNAM, "FAULT")
	field(ONAM, "OK")
	field(ZSV, "MAJOR")
	field(OSV, "NO_ALARM")
	info(archive,"policy:Default")
	field(SCAN, "I/O Intr")
	field(INP, "@asynMask(read120 0 0x02 500)")
	field(DTYP, "asynUInt32Digital")
}
record (bi,"$(P):CCPSIsaqComIntlk") {
	field(DESC, "CCPS isolated acquisition board intlk")
	field(ZNAM, "FAULT")
	field(ONAM, "OK")
	field(ZSV, "MAJOR")
	field(OSV, "NO_ALARM")
	info(archive,"policy:Default")
	field(SCAN, "I/O Intr")
	field(INP, "@asynMask(read120 0 0x04 500)")
	field(DTYP, "asynUInt32Digital")
}
record (bi,"$(P):CCPSSoftStartIntlk") {
	field(DESC, "Capacitor charging ps soft start intlk")
	field(ZNAM, "FAULT")
	field(ONAM, "OK")
	field(ZSV, "MAJOR")
	field(OSV, "NO_ALARM")
	info(archive,"policy:Default")
	field(SCAN, "I/O Intr")
	field(INP, "@asynMask(read120 0 0x08 500)")
	field(DTYP, "asynUInt32Digital")
}
record (bi,"$(P):CCPSIgbtIntlk") {
	field(DESC, "Capacitor charging ps igbt intlk")
	field(ZNAM, "FAULT")
	field(ONAM, "OK")
	field(ZSV, "MAJOR")
	field(OSV, "NO_ALARM")
	info(archive,"policy:Default")
	field(SCAN, "I/O Intr")
	field(INP, "@asynMask(read120 0 0x10 500)")
	field(DTYP, "asynUInt32Digital")
}
record (bi,"$(P):CCPSPhaseLossIntlk") {
	field(DESC, "Capacitor charging ps phase loss intlk")
	field(ZNAM, "FAULT")
	field(ONAM, "OK")
	field(ZSV, "MAJOR")
	field(OSV, "NO_ALARM")
	info(archive,"policy:Default")
	field(SCAN, "I/O Intr")
	field(INP, "@asynMask(read120 0 0x20 500)")
	field(DTYP, "asynUInt32Digital")
}
record (bi,"$(P):CCPSTransformTempIntlk") {
	field(DESC, "CCPS transformer temp intlk")
	field(ZNAM, "FAULT")
	field(ONAM, "OK")
	field(ZSV, "MAJOR")
	field(OSV, "NO_ALARM")
	info(archive,"policy:Default")
	field(SCAN, "I/O Intr")
	field(INP, "@asynMask(read120 0 0x40 500)")
	field(DTYP, "asynUInt32Digital")
}
record (bi,"$(P):CCPSRectifierTempIntlk") {
	field(DESC, "CCPS rectifier temp intlk")
	field(ZNAM, "FAULT")
	field(ONAM, "OK")
	field(ZSV, "MAJOR")
	field(OSV, "NO_ALARM")
	info(archive,"policy:Default")
	field(SCAN, "I/O Intr")
	field(INP, "@asynMask(read120 0 0x80 500)")
	field(DTYP, "asynUInt32Digital")
}
record (bi,"$(P):CCPSIgbtTempIntlk") {
	field(DESC, "Capacitor charging ps igbt temp intlk")
	field(ZNAM, "FAULT")
	field(ONAM, "OK")
	field(ZSV, "MAJOR")
	field(OSV, "NO_ALARM")
	info(archive,"policy:Default")
	field(SCAN, "I/O Intr")
	field(INP, "@asynMask(read120 0 0x100 500)")
	field(DTYP, "asynUInt32Digital")
}
record (bi,"$(P):CCPSOverVoltageIntlk") {
	field(DESC, "Capacitor charging ps over voltage intlk")
	field(ZNAM, "FAULT")
	field(ONAM, "OK")
	field(ZSV, "MAJOR")
	field(OSV, "NO_ALARM")
	info(archive,"policy:Default")
	field(SCAN, "I/O Intr")
	field(INP, "@asynMask(read120 0 0x200 500)")
	field(DTYP, "asynUInt32Digital")
}
record (bi,"$(P):CCPSOverCurrentIntlk") {
	field(DESC, "Capacitor charging ps over current intlk")
	field(ZNAM, "FAULT")
	field(ONAM, "OK")
	field(ZSV, "MAJOR")
	field(OSV, "NO_ALARM")
	info(archive,"policy:Default")
	field(SCAN, "I/O Intr")
	field(INP, "@asynMask(read120 0 0x400 500)")
	field(DTYP, "asynUInt32Digital")
}
record (bi,"$(P):CCPSFiberTimeoutIntlk") {
	field(DESC, "CCPS opto fiber dark timeout intlk")
	field(ZNAM, "FAULT")
	field(ONAM, "OK")
	field(ZSV, "MAJOR")
	field(OSV, "NO_ALARM")
	info(archive,"policy:Default")
	field(SCAN, "I/O Intr")
	field(INP, "@asynMask(read120 0 0x800 500)")
	field(DTYP, "asynUInt32Digital")
}
record (ai,"$(P):FilamentCurrent") {
	field(DESC, "Filament power supply current")
	field(EGU, "A")
	field(HIHI, "28")
	field(HHSV, "MAJOR")
	field(LOLO, "0")
	field(LLSV, "MAJOR")
	field(HIGH, "27.5")
	field(HSV, "MINOR")
	field(LOW, "22.5")
	field(LSV, "MINOR")
	info(archive,"policy:3min")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read200 0)")
	field(DTYP, "asynFloat64")
}
record (ai,"$(P):FilamentVoltage") {
	field(DESC, "Filament power supply voltage")
	field(EGU, "V")
	field(HIHI, "32")
	field(HHSV, "MAJOR")
	field(HIGH, "30")
	field(HSV, "MINOR")
	info(archive,"policy:3min")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read202 0)")
	field(DTYP, "asynFloat64")
}
record (ai,"$(P):IonPumpCurrent") {
	field(DESC, "Ion pump controller 1 current")
	field(EGU, "nA")
	field(HIHI, "100")
	field(HHSV, "MAJOR")
	field(HIGH, "10")
	field(HSV, "MINOR")
	info(archive,"policy:3min")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read300 0)")
	field(DTYP, "asynFloat64")
}
record (ai,"$(P):IonPumpVoltage") {
	field(DESC, "Ion pump controller 1 voltage")
	field(EGU, "kV")
	field(HIHI, "5.5")
	field(HHSV, "MAJOR")
	field(LOLO, "0")
	field(LLSV, "MAJOR")
	field(HIGH, "5")
	field(HSV, "MINOR")
	field(LOW, "4")
	field(LSV, "MINOR")
	info(archive,"policy:3min")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read302 0)")
	field(DTYP, "asynFloat64")
}
record (ai,"$(P):SolenoidPS1Current") {
	field(DESC, "Solenoid power supply 1 current")
	field(EGU, "A")
	field(HIHI, "41.5")
	field(HHSV, "MAJOR")
	field(LOLO, "30")
	field(LLSV, "MAJOR")
	field(HIGH, "41")
	field(HSV, "MINOR")
	field(LOW, "31")
	field(LSV, "MINOR")
	info(archive,"policy:3min")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read400 0)")
	field(DTYP, "asynFloat64")
}
record (ai,"$(P):SolenoidPS1Voltage") {
	field(DESC, "Solenoid power supply 1 voltage")
	field(EGU, "V")
	field(HIHI, "60.7")
	field(HHSV, "MAJOR")
	field(LOLO, "50")
	field(LLSV, "MAJOR")
	field(HIGH, "60")
	field(HSV, "MINOR")
	field(LOW, "53.5")
	field(LSV, "MINOR")
	info(archive,"policy:3min")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read402 0)")
	field(DTYP, "asynFloat64")
}
#record (ai,"$(P):SolenoidPS2Current") {
#	field(DESC, "Solenoid power supply 2 current")
#	field(EGU, "A")
#	field(HIHI, "24")
#	field(HHSV, "MAJOR")
#	field(LOLO, "20")
#	field(LLSV, "MAJOR")
#	field(HIGH, "23")
#	field(HSV, "MINOR")
#	field(LOW, "21")
#	field(LSV, "MINOR")
#	info(archive,"policy:3min")
#	field(SCAN, "I/O Intr")
#	field(INP, "@asyn(read404 0)")
#	field(DTYP, "asynFloat64")
#}
#record (ai,"$(P):SolenoidPS2Voltage") {
#	field(DESC, "Solenoid power supply 2 voltage")
#	field(EGU, "V")
#	field(HIHI, "33.7")
#	field(HHSV, "MAJOR")
#	field(LOLO, "30")
#	field(LLSV, "MAJOR")
#	field(HIGH, "33")
#	field(HSV, "MINOR")
#	field(LOW, "31")
#	field(LSV, "MINOR")
#	info(archive,"policy:3min")
#	field(SCAN, "I/O Intr")
#	field(INP, "@asyn(read406 0)")
#	field(DTYP, "asynFloat64")
#}
#record (ai,"$(P):SolenoidPS3Current") {
#	field(DESC, "Solenoid power supply 3 current")
#	field(EGU, "A")
#	field(HIHI, "36")
#	field(HHSV, "MAJOR")
#	field(LOLO, "30")
#	field(LLSV, "MAJOR")
#	field(HIGH, "35")
#	field(HSV, "MINOR")
#	field(LOW, "31")
#	field(LSV, "MINOR")
#	info(archive,"policy:3min")
#	field(SCAN, "I/O Intr")
#	field(INP, "@asyn(read408 0)")
#	field(DTYP, "asynFloat64")
#}
#record (ai,"$(P):SolenoidPS3Voltage") {
#	field(DESC, "Solenoid power supply 3 voltage")
#	field(EGU, "V")
#	field(HIHI, "49.1")
#	field(HHSV, "MAJOR")
#	field(LOLO, "43")
#	field(LLSV, "MAJOR")
#	field(HIGH, "48")
#	field(HSV, "MINOR")
#	field(LOW, "44")
#	field(LSV, "MINOR")
#	info(archive,"policy:3min")
#	field(SCAN, "I/O Intr")
#	field(INP, "@asyn(read410 0)")
#	field(DTYP, "asynFloat64")
#}
record (ai,"$(P):CurrentTransformer") {
	field(DESC, "Pulse current amplitude")
	field(EGU, "A")
	field(HIHI, "265")
	field(HHSV, "MAJOR")
	field(HIGH, "250")
	field(HSV, "MINOR")
	info(archive,"policy:3min")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read500 0)")
	field(DTYP, "asynFloat64")
}
record (ai,"$(P):CapVoltageDivider") {
	field(DESC, "Pulse voltage amplitude")
	field(EGU, "kV")
	field(HIHI, "265")
	field(HHSV, "MAJOR")
	field(HIGH, "240")
	field(HSV, "MINOR")
	info(archive,"policy:3min")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read502 0)")
	field(DTYP, "asynFloat64")
}
record (ai,"$(P):PulseWidth") {
	field(DESC, "Pulse width at 50% height current pulse")
	field(EGU, "us")
	field(HIHI, "4.7")
	field(HHSV, "MAJOR")
	field(HIGH, "4.5")
	field(HSV, "MINOR")
	info(archive,"policy:3min")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read504 0)")
	field(DTYP, "asynFloat64")
}
record (ai,"$(P):OilTemp") {
	field(DESC, "Oil temperature")
	field(EGU, "C")
	field(HIHI, "56")
	field(HHSV, "MAJOR")
	field(LOLO, "15")
	field(LLSV, "MAJOR")
	field(HIGH, "53")
	field(HSV, "MINOR")
	field(LOW, "16")
	field(LSV, "MINOR")
	info(archive,"policy:3min")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read600 0)")
	field(DTYP, "asynFloat64")
}
record (ai,"$(P):OilLevel") {
	field(DESC, "Oil level")
	field(EGU, "mm")
	field(HIHI, "-5")
	field(HHSV, "MAJOR")
	field(LOLO, "-40")
	field(LLSV, "MAJOR")
	field(HIGH, "-10")
	field(HSV, "MINOR")
	field(LOW, "-25")
	field(LSV, "MINOR")
	info(archive,"policy:3min")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read602 0)")
	field(DTYP, "asynFloat64")
}
record (ai,"$(P):InletWaterTemp") {
	field(DESC, "Inlet water temperature")
	field(EGU, "C")
	field(HIHI, "28")
	field(HHSV, "MAJOR")
	field(LOLO, "15")
	field(LLSV, "MAJOR")
	field(HIGH, "27")
	field(HSV, "MINOR")
	field(LOW, "16")
	field(LSV, "MINOR")
	info(archive,"policy:3min")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read700 0)")
	field(DTYP, "asynFloat64")
}
record (ai,"$(P):CollectorReturnTemp") {
	field(DESC, "Collector return temperature")
	field(EGU, "C")
	field(HIHI, "29")
	field(HHSV, "MAJOR")
	field(LOLO, "15")
	field(LLSV, "MAJOR")
	field(HIGH, "27")
	field(HSV, "MINOR")
	field(LOW, "16")
	field(LSV, "MINOR")
	info(archive,"policy:3min")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read702 0)")
	field(DTYP, "asynFloat64")
}
record (ai,"$(P):BodyReturnTemp") {
	field(DESC, "Body return temperature")
	field(EGU, "C")
	field(HIHI, "29")
	field(HHSV, "MAJOR")
	field(LOLO, "15")
	field(LLSV, "MAJOR")
	field(HIGH, "27")
	field(HSV, "MINOR")
	field(LOW, "16")
	field(LSV, "MINOR")
	info(archive,"policy:3min")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read704 0)")
	field(DTYP, "asynFloat64")
}
record (ai,"$(P):RFDrivePower") {
	field(DESC, "RF drive power")
	field(EGU, "W")
	field(HIHI, "520")
	field(HHSV, "MAJOR")
	field(HIGH, "500")
	field(HSV, "MINOR")
	info(archive,"policy:3min")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read800 0)")
	field(DTYP, "asynFloat64")
}
#record (ai,"$(P):RFForwardPower") {
#	field(DESC, "RF foward power")
#	field(EGU, "dBm")
#	field(HIHI, "103")
#	field(HHSV, "MAJOR")
#	field(HIGH, "102")
#	field(HSV, "MINOR")
#	info(archive,"policy:3min")
#	field(SCAN, "I/O Intr")
#	field(INP, "@asyn(read820 0)")
#	field(DTYP, "asynFloat64")
#}
#record (ai,"$(P):RFReturnLoss") {
#	field(DESC, "RF reflected power")
#	field(EGU, "dBm")
#	field(HIHI, "70")
#	field(HHSV, "MAJOR")
#	field(HIGH, "60")
#	field(HSV, "MINOR")
#	info(archive,"policy:3min")
#	field(SCAN, "I/O Intr")
#	field(INP, "@asyn(read822 0)")
#	field(DTYP, "asynFloat64")
#}
#record (ai,"$(P):RFVSWR") {
#	field(DESC, "RF voltage standing wave ratio")
#	field(HIHI, "10")
#	field(HHSV, "MAJOR")
#	field(HIGH, "5")
#	field(HSV, "MINOR")
#	info(archive,"policy:3min")
#	field(SCAN, "I/O Intr")
#	field(INP, "@asyn(read824 0)")
#	field(DTYP, "asynFloat64")
#}
#record (ai,"$(P):RFPulseLength") {
#	field(DESC, "RF pulse length")
#	field(EGU, "us")
#	field(HIHI, "4.7")
#	field(HHSV, "MAJOR")
#	field(HIGH, "4.5")
#	field(HSV, "MINOR")
#	info(archive,"policy:3min")
#	field(SCAN, "I/O Intr")
#	field(INP, "@asyn(read826 0)")
#	field(DTYP, "asynFloat64")
#}
record (ai,"$(P):CCPSWaterFlow1") {
	field(DESC, "Capacitor charging ps water flow 1")
	field(EGU, "l/m")
	field(HIHI, "5.9")
	field(HHSV, "MAJOR")
	field(LOLO, "4.5")
	field(LLSV, "MAJOR")
	field(HIGH, "5.6")
	field(HSV, "MINOR")
	field(LOW, "5.1")
	field(LSV, "MINOR")
	info(archive,"policy:3min")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read900 0)")
	field(DTYP, "asynFloat64")
}
record (ai,"$(P):CCPSWaterFlow2") {
	field(DESC, "Capacitor charging ps water flow 2")
	field(EGU, "l/m")
	field(HIHI, "5.9")
	field(HHSV, "MAJOR")
	field(LOLO, "4.5")
	field(LLSV, "MAJOR")
	field(HIGH, "5.6")
	field(HSV, "MINOR")
	field(LOW, "5.1")
	field(LSV, "MINOR")
	info(archive,"policy:3min")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read902 0)")
	field(DTYP, "asynFloat64")
}
#record (ai,"$(P):CCPSWaterFlow3") {
#	field(DESC, "Capacitor charging ps water flow 3")
#	field(EGU, "l/m")
#	field(HIHI, "5.9")
#	field(HHSV, "MAJOR")
#	field(LOLO, "4.5")
#	field(LLSV, "MAJOR")
#	field(HIGH, "5.6")
#	field(HSV, "MINOR")
#	field(LOW, "5.1")
#	field(LSV, "MINOR")
#	info(archive,"policy:3min")
#	field(SCAN, "I/O Intr")
#	field(INP, "@asyn(read904 0)")
#	field(DTYP, "asynFloat64")
#}
#record (ai,"$(P):BodyWindowFlow") {
#	field(DESC, "Body window water flow")
#	field(EGU, "l/m")
#	field(HIHI, "4.5")
#	field(HHSV, "MAJOR")
#	field(LOLO, "3.4")
#	field(LLSV, "MAJOR")
#	field(HIGH, "4.3")
#	field(HSV, "MINOR")
#	field(LOW, "3.7")
#	field(LSV, "MINOR")
#	info(archive,"policy:3min")
#	field(SCAN, "I/O Intr")
#	field(INP, "@asyn(read908 0)")
#	field(DTYP, "asynFloat64")
#}
#record (ai,"$(P):CollectorFlow") {
#	field(DESC, "Collector water flow")
#	field(EGU, "l/m")
#	field(HIHI, "20")
#	field(HHSV, "MAJOR")
#	field(LOLO, "15")
#	field(LLSV, "MAJOR")
#	field(HIGH, "19")
#	field(HSV, "MINOR")
#	field(LOW, "17")
#	field(LSV, "MINOR")
#	info(archive,"policy:3min")
#	field(SCAN, "I/O Intr")
#	field(INP, "@asyn(read910 0)")
#	field(DTYP, "asynFloat64")
#}
#record (ai,"$(P):SolenoidFlow") {
#	field(DESC, "Solenoid water flow")
#	field(EGU, "l/m")
#	field(HIHI, "8")
#	field(HHSV, "MAJOR")
#	field(LOLO, "6.7")
#	field(LLSV, "MAJOR")
#	field(HIGH, "7.8")
#	field(HSV, "MINOR")
#	field(LOW, "6.9")
#	field(LSV, "MINOR")
#	info(archive,"policy:3min")
#	field(SCAN, "I/O Intr")
#	field(INP, "@asyn(read912 0)")
#	field(DTYP, "asynFloat64")
#}

record (longin,"$(P):WaveformType") {
	field(DESC, "Waveform type requested, 99 if error")
	field(HIHI, "140")
	field(HHSV, "MAJOR")
	field(LOLO, "99")
	field(LLSV, "MAJOR")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn(read3000 0)")
	field(DTYP, "asynInt32")
}
record (mbbo,"$(P):StateSet") {
	field(DESC, "Set value for the target state")
	field(UNSV, "MAJOR")
	field(ZRSV, "MAJOR")
	field(PINI, "YES")
	field(OUT, "@asyn(write1)")
	field(DTYP, "asynInt32")
	field(ZRVL, "-1")
	field(ZRST, "Error")
	field(ONVL, "0")
	field(ONST, "Initialize")
	field(TWVL, "1")
	field(TWST, "Off")
	field(THVL, "2")
	field(THST, "StandByInterlock")
	field(FRVL, "3")
	field(FRST, "StandByOffRequested")
	field(FVVL, "4")
	field(FVST, "StandByOnRequested")
	field(SXVL, "5")
	field(SXST, "StandBy")
	field(SVVL, "6")
	field(SVST, "HvInterlock")
	field(EIVL, "7")
	field(EIST, "HvOffRequested")
	field(NIVL, "8")
	field(NIST, "HvOnRequested")
	field(TEVL, "9")
	field(TEST, "Hv")
	field(ELVL, "10")
	field(ELST, "TrigInterlock")
	field(TVVL, "11")
	field(TVST, "TrigOffRequested")
	field(TTVL, "12")
	field(TTST, "TrigOnRequested")
	field(FTVL, "13")
	field(FTST, "Trig")
	field(FFVL, "99")
	field(FFST, "Disabled")
}
record (bo,"$(P):Reset") {
	field(DESC, "Reset modulator interlocks")
	field(ZNAM, "RESET")
	field(ONAM, "RESETTING")
	field(HIGH, "1")
	field(PINI, "YES")
	field(OUT, "@asynMask(write2 0 0x01 500)")
	field(DTYP, "asynUInt32Digital")
}
record (bo,"$(P):HardReset") {
	field(DESC, "Hard reset modulator interlocks")
	field(ZNAM, "HARD RESET")
	field(ONAM, "HARD RESETTING")
	field(HIGH, "1")
	field(PINI, "YES")
	field(OUT, "@asynMask(write2 0 0x04 500)")
	field(DTYP, "asynUInt32Digital")
}
#record (ao,"$(P):VoltageSet") {
#	field(DESC, "Set voltage for capacitor charging ps")
#	field(EGU, "V")
#	field(HIHI, "1000")
#	field(HHSV, "MAJOR")
#	field(HIGH, "980")
#	field(HSV, "MINOR")
#	field(DRVH, "980")
#	field(DRVL, "0")
#	field(PINI, "YES")
#	field(OUT, "@asyn(write100)")
#	field(DTYP, "asynFloat64")
#}
#record (ao,"$(P):FilamentCurrentSet") {
#	field(DESC, "Set val for filament current")
#	field(EGU, "A")
#	field(HIHI, "28")
#	field(HHSV, "MAJOR")
#	field(LOLO, "0")
#	field(LLSV, "MAJOR")
#	field(DRVH, "28")
#	field(DRVL, "0")
#	field(PINI, "YES")
#	field(OUT, "@asyn(write200)")
#	field(DTYP, "asynFloat64")
#}
#record (ao,"$(P):PulseWidthSet") {
#	field(DESC, "Pulse width set for all Sus, range 1-5us")
#	field(EGU, "us")
#	field(HIHI, "4.5")
#	field(HHSV, "MAJOR")
#	field(LOLO, "1")
#	field(LLSV, "MAJOR")
#	field(DRVH, "4.5")
#	field(DRVL, "1")
#	field(PINI, "YES")
#	field(OUT, "@asyn(write300)")
#	field(DTYP, "asynFloat64")
#}
#record (ao,"$(P):PulseRepFreqSet") {
#	field(DESC, "Local pulse repetition frequency setval")
#	field(EGU, "Hz")
#	field(HIHI, "10")
#	field(HHSV, "MAJOR")
#	field(PINI, "YES")
#	field(OUT, "@asyn(write400)")
#	field(DTYP, "asynFloat64")
#}
#record (ao,"$(P):SolenoidPS1CurrentSet") {
#	field(DESC, "Current set for solenoid power supply 1")
#	field(EGU, "A")
#	field(HIHI, "41.5")
#	field(HHSV, "MAJOR")
#	field(LOLO, "30")
#	field(LLSV, "MAJOR")
#	field(HIGH, "41")
#	field(HSV, "MINOR")
#	field(LOW, "31")
#	field(LSV, "MINOR")
#	field(DRVH, "41")
#	field(DRVL, "0")
#	field(PINI, "YES")
#	field(OUT, "@asyn(write500)")
#	field(DTYP, "asynFloat64")
#}
#record (ao,"$(P):SolenoidPS2CurrentSet") {
#	field(DESC, "Current set for solenoid power supply 2")
#	field(EGU, "A")
#	field(HIHI, "24")
#	field(HHSV, "MAJOR")
#	field(LOLO, "20")
#	field(LLSV, "MAJOR")
#	field(HIGH, "23")
#	field(HSV, "MINOR")
#	field(LOW, "21")
#	field(LSV, "MINOR")
#	field(DRVH, "23.3")
#	field(DRVL, "0")
#	field(PINI, "YES")
#	field(OUT, "@asyn(write502)")
#	field(DTYP, "asynFloat64")
#}
#record (ao,"$(P):SolenoidPS3CurrentSet") {
#	field(DESC, "Current set for solenoid power supply 3")
#	field(EGU, "A")
#	field(HIHI, "36")
#	field(HHSV, "MAJOR")
#	field(LOLO, "30")
#	field(LLSV, "MAJOR")
#	field(HIGH, "35")
#	field(HSV, "MINOR")
#	field(LOW, "31")
#	field(LSV, "MINOR")
#	field(DRVH, "35")
#	field(DRVL, "0")
#	field(PINI, "YES")
#	field(OUT, "@asyn(write504)")
#	field(DTYP, "asynFloat64")
#}
