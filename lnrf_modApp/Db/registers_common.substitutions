# we use the 64-bit float template for 32-bit floats
file aiFloat64.template
{
    pattern
    { P,      R,                     PORT,      OFFSET, UNITS, LOPR, HIPR, PREC, DATA_TYPE,  SCAN       }
    { "${P}", ":VoltageSetRBV",      "read21",  0,      "V",   0,    1200, 3,    FLOAT32_LE, "I/O Intr" }
    { "${P}", ":PulseWidthRBV",      "read25",  0,      "us",  1,    5,    3,    FLOAT32_LE, "I/O Intr" }
    { "${P}", ":CurrentTransformer", "read500", 0,      "A",   0,    1200, 3,    FLOAT32_LE, "I/O Intr" }
    { "${P}", ":CapVoltageDivider",  "read502", 0,      "kV",  0,    100,  3,    FLOAT32_LE, "I/O Intr" }
}

# we use the 64-bit float template for 32-bit floats
file aoFloat64.template
{
    pattern
    { P,      R,                PORT,       OFFSET, UNITS, LOPR, HIPR, PREC, DATA_TYPE  }
    { "${P}", ":VoltageSet",    "write100", 0,      "V",   0,    1200, 3,    FLOAT32_LE }
    { "${P}", ":PulseWidthSet", "write300", 0,      "us",  1,    5,    3,    FLOAT32_LE }
}

# int32 in
file ai.template
{
    pattern
    { P,      R,                         PORT,        OFFSET, BITS, EGUL, EGUF,  PREC, SCAN       }
    { "${P}", ":ModbusProtocolID",       "read0",     0,      16,   0,    65535, 0,    "I/O Intr" }
    { "${P}", ":ModbusProtocolRevision", "read1",     0,      16,   0,    65535, 0,    "I/O Intr" }
    { "${P}", ":WatchdogRBV",            "read2",     0,      16,   0,    65535, 0,    "I/O Intr" }
}

# int32 out
file ao.template
{
    pattern
    { P,      R,                 PORT,        OFFSET, BITS, EGUL, EGUF,  PREC }
    { "${P}", ":CommWatchdog",   "write0",    0,      16,   0,    65535, 0    }
}
